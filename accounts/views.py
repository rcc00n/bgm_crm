# accounts/views.py
from __future__ import annotations

from django.contrib import messages
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.views import LoginView
from django.core.exceptions import PermissionDenied
from django.http import JsonResponse, HttpResponse
from django.shortcuts import redirect
from django.urls import reverse, reverse_lazy
from django.views.generic import TemplateView, ListView
from django.views.generic.edit import CreateView

from django.utils import timezone
from django.db.models import OuterRef, Subquery, Count
from django.db.models.functions import TruncMonth

from core.models import (
    Service,
    Appointment,
    AppointmentStatusHistory,
)

from .forms import (
    ClientRegistrationForm,
    ClientProfileForm,
)


# =========================
# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –¥–æ—Å—Ç—É–ø
# =========================
class RoleBasedLoginView(LoginView):
    """
    –õ–æ–≥–∏–Ω —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏ –ø–æ —Ä–æ–ª—è–º:
      ‚Ä¢ staff/superuser ‚Üí /admin
      ‚Ä¢ Master ‚Üí master_dashboard
      ‚Ä¢ Client ‚Üí mainmenu
    """
    template_name = "registration/login.html"

    def get_success_url(self):
        user = self.request.user
        if user.is_staff or user.is_superuser:
            return reverse("admin:index")

        role_names = set(
            user.userrole_set.select_related("role").values_list("role__name", flat=True)
        )
        if "Master" in role_names:
            return reverse("master_dashboard")
        if "Client" in role_names:
            return reverse("mainmenu")

        return super().get_success_url()


class RoleRequiredMixin(LoginRequiredMixin):
    """
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏.
    """
    required_role: str | None = None

    def dispatch(self, request, *args, **kwargs):
        if self.required_role and not request.user.userrole_set.filter(role__name=self.required_role).exists():
            raise PermissionDenied
        return super().dispatch(request, *args, **kwargs)


# =========================
# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∏–µ–Ω—Ç–∞ (–∫–∞—Ç–∞–ª–æ–≥)
# =========================
class MainMenuView(LoginRequiredMixin, TemplateView):
    template_name = "client/mainmenu.html"
    login_url = reverse_lazy("login")
    redirect_field_name = "next"

    def dispatch(self, request, *args, **kwargs):
        if not request.user.userrole_set.filter(role__name="Client").exists():
            raise PermissionDenied
        return super().dispatch(request, *args, **kwargs)


# =========================
# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
# =========================
class ClientDashboardView(LoginRequiredMixin, TemplateView):
    """
    GET  ‚Üí —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –¥–∞–Ω–Ω—ã–µ
    POST ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (User + UserProfile)
    """
    template_name = "client/dashboard.html"

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        user = self.request.user
        now = timezone.now()

        # –ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Üí None
        ctx["profile"] = getattr(user, "userprofile", None)

        # –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
        ctx["services"] = Service.objects.all().order_by("name")

        # –ø–æ–¥–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
        latest_status = (
            AppointmentStatusHistory.objects.filter(appointment_id=OuterRef("pk"))
            .order_by("-set_at")
            .values("status__name")[:1]
        )

        # –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏/–∏—Å—Ç–æ—Ä–∏–∏)
        qs = (
            Appointment.objects
            .filter(client=user)
            .select_related("service", "master")
            .annotate(current_status=Subquery(latest_status))
            .order_by("-start_time")
        )
        ctx["appointments"] = qs

        # –ø—Ä–æ—à–ª—ã–µ –∏ –±—É–¥—É—â–∏–µ
        ctx["recent_appointments"] = qs.filter(start_time__lt=now)[:5]

        # üîπ –≤—Å–µ –±—É–¥—É—â–∏–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é), –∏—Å–∫–ª—é—á–∞—è –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ
        upcoming_qs = (
            qs.filter(start_time__gte=now)
              .exclude(current_status="Cancelled")
              .order_by("start_time")
        )
        ctx["upcoming_appointments"] = upcoming_qs
        ctx["next_appointment"] = upcoming_qs.first()  # –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

        # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞)
        month_counts = (
            qs.filter(start_time__year=now.year)
              .annotate(month=TruncMonth("start_time"))
              .values("month")
              .annotate(cnt=Count("id"))
              .order_by("month")
        )
        ctx["chart_labels"] = [m["month"].strftime("%b") for m in month_counts]
        ctx["chart_data"] = [m["cnt"] for m in month_counts]

        return ctx

    def post(self, request, *args, **kwargs):
        """
        –§–æ—Ä–º–∞ –ø—Ä–æ—Ñ–∏–ª—è (–≤–∫–ª–∞–¥–∫–∞ Profile).
        –ü–æ–ª—è: first_name, last_name, email, phone, birth_date (YYYY-MM-DD).
        """
        form = ClientProfileForm(request.POST, user=request.user)
        if form.is_valid():
            form.save()
            messages.success(request, "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω.")
            return redirect(reverse("dashboard") + "#profile")

        ctx = self.get_context_data()
        ctx["profile_form_errors"] = form.errors
        return self.render_to_response(ctx, status=400)


# =========================
# –ö–∞–±–∏–Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–∞
# =========================
class MasterDashboardView(RoleRequiredMixin, TemplateView):
    required_role = "Master"
    template_name = "master/dashboard.html"


# =========================
# –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞
# =========================
class ClientAppointmentsListView(RoleRequiredMixin, ListView):
    required_role = "Client"
    model = Appointment
    template_name = "client/appointments_list.html"
    paginate_by = 10

    def get_queryset(self):
        return (
            Appointment.objects
            .filter(client=self.request.user)
            .select_related("service", "master")
            .order_by("-start_time")
        )


# =========================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (AJAX-friendly)
# =========================
class ClientRegisterView(CreateView):
    form_class = ClientRegistrationForm
    template_name = "registration/register_popup.html"
    success_url = None  # –≤—ã—á–∏—Å–ª—è–µ–º –≤ get_success_url()

    def form_valid(self, form):
        form.save()
        if self.request.headers.get("x-requested-with") == "XMLHttpRequest":
            return HttpResponse("OK")
        return super().form_valid(form)

    def form_invalid(self, form):
        if self.request.headers.get("x-requested-with") == "XMLHttpRequest":
            return JsonResponse(form.errors, status=400)
        return super().form_invalid(form)

    def get_success_url(self):
        return f"{reverse('login')}?registered=1"

# accounts/views.py
from django.views.generic import TemplateView
from core.models import ServiceCategory, Service

class HomeView(TemplateView):
    template_name = "client/bgm_home.html"   # ‚Üê –±—ã–ª–æ site/home_bgm.html

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx["categories"] = ServiceCategory.objects.prefetch_related("service_set").all()
        ctx["filter_categories"] = ctx["categories"]
        ctx["uncategorized"] = Service.objects.filter(category__isnull=True)
        ctx["has_any_services"] = Service.objects.exists()
        return ctx
    
# accounts/views.py
from django.views.generic import TemplateView

class StorePlaceholderView(TemplateView):
    template_name = "client/store.html"

class MerchPlaceholderView(TemplateView):
    template_name = "client/merch.html"

